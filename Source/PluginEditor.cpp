/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <numeric>

//==============================================================================
TestPluginAudioProcessorEditor::TestPluginAudioProcessorEditor (TestPluginAudioProcessor& p)
    :   AudioProcessorEditor (p),
        headroomBreachedLabel("", "Headroom: OK"),
        dynamicRangeLabel("", "Dynamic Range: 0dB"),
        stereoCorrelationLabel("", "Stereo Correlation: 0"),
        resetButton("Reset"),
        monoButton("Mono"),
        leftLevel("","",""),
        rightLevel("-inf", "-6dB", "0db"),
        dynamicHeadroomLevel("0db", "10dB", "20db"),
        stereoCorrelationLevel("-1", "0", "+1"),
        bassSpaceLabel("", "Bass Space: soon!"),
        hyperLink("Get it mastered at Mastering The Mix", URL ("http://www.masteringthemix.com"))

{
    
    addAndMakeVisible(&logo);
    
    vectorScope.radius = 75;
    addAndMakeVisible(vectorScope);
    
    headroomBreachedLabel.setJustificationType(juce::Justification::left);
    addAndMakeVisible(headroomBreachedLabel);
    headroomBreachedLabel.setFont (Font (15.0f));
    
    addAndMakeVisible(resetButton);
    resetButton.addListener(this);
    
    addAndMakeVisible(monoButton);
    monoButton.addListener(this);
    
    dynamicRangeLabel.setJustificationType(juce::Justification::left);
    addAndMakeVisible(dynamicRangeLabel);
    dynamicRangeLabel.setFont (Font (15.0f));
    
    stereoCorrelationLabel.setJustificationType(juce::Justification::left);
    addAndMakeVisible(stereoCorrelationLabel);
    stereoCorrelationLabel.setFont(Font(15.0f));

    bassSpaceLabel.setJustificationType(juce::Justification::left);
    addAndMakeVisible(bassSpaceLabel);
    bassSpaceLabel.setFont(Font(15.0f));

    addAndMakeVisible(hyperLink);
    hyperLink.setTooltip(String("www.masteringthemix.com"));
    hyperLink.setFont(Font(15.0f), false, juce::Justification::left);
    
    leftLevel.barCount = 20;
    leftLevel.barWidth = 16;
    leftLevel.minValue = 0;
    leftLevel.maxValue = 1;
    leftLevel.overBar = 11;
    leftLevel.step = 2;
    leftLevel.overColour = Colours::red;
    leftLevel.underColour = Colours::green;
    leftLevel.barColour = Colours::black;
    leftLevel.meterType = MeterType::NORMAL;
    addAndMakeVisible(leftLevel);
    
    rightLevel.barCount = 20;
    rightLevel.barWidth = 16;
    rightLevel.minValue = 0;
    rightLevel.maxValue = 1;
    rightLevel.overBar = 11;
    rightLevel.step = 2;
    rightLevel.overColour = Colours::red;
    rightLevel.underColour = Colours::green;
    rightLevel.barColour = Colours::black;
    rightLevel.meterType = MeterType::NORMAL;
    addAndMakeVisible(rightLevel);
    
    dynamicHeadroomLevel.barCount = 20;
    dynamicHeadroomLevel.barWidth = 16;
    dynamicHeadroomLevel.minValue = 0;
    dynamicHeadroomLevel.maxValue = 20;
    dynamicHeadroomLevel.overBar = 11;
    dynamicHeadroomLevel.step = 2;
    dynamicHeadroomLevel.overColour = Colours::red;
    dynamicHeadroomLevel.underColour = Colours::green;
    dynamicHeadroomLevel.barColour = Colours::black;
    dynamicHeadroomLevel.meterType = MeterType::DYNAMICRANGE;
    addAndMakeVisible(dynamicHeadroomLevel);
    
    stereoCorrelationLevel.barCount = 20;
    stereoCorrelationLevel.barWidth = 16;
    stereoCorrelationLevel.minValue = 0;
    stereoCorrelationLevel.maxValue = 2;
    stereoCorrelationLevel.overBar = 10;
    stereoCorrelationLevel.step = 2;
    stereoCorrelationLevel.overColour = Colours::red;
    stereoCorrelationLevel.underColour = Colours::green;
    stereoCorrelationLevel.barColour = Colours::black;
    stereoCorrelationLevel.meterType = MeterType::CORRRELATION;
    addAndMakeVisible(stereoCorrelationLevel);
    
    freq1Label.setJustificationType(juce::Justification::left);
    addAndMakeVisible(freq1Label);
    freq1Label.setFont(Font(10.0f));
    
    freq2Label.setJustificationType(juce::Justification::left);
    addAndMakeVisible(freq2Label);
    freq2Label.setFont(Font(10.0f));
    
    freq3Label.setJustificationType(juce::Justification::left);
    addAndMakeVisible(freq3Label);
    freq3Label.setFont(Font(10.0f));
    
    freq4Label.setJustificationType(juce::Justification::left);
    addAndMakeVisible(freq4Label);
    freq4Label.setFont(Font(10.0f));
    
    blockSizeLabel.setJustificationType(juce::Justification::left);
    addAndMakeVisible(blockSizeLabel);
    blockSizeLabel.setFont(Font(10.0f));
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (745, 410);
    
    getProcessor().addChangeListener(this);
    
    startTimer (20);
}

TestPluginAudioProcessorEditor::~TestPluginAudioProcessorEditor()
{
    getProcessor().removeChangeListener(this);
}

//==============================================================================
void TestPluginAudioProcessorEditor::paint (Graphics& g)
{
    
    g.fillAll (Colours::white);

//    g.setColour (Colours::black);
//    g.setFont (15.0f);
//    g.drawFittedText ("Hello World!", getLocalBounds(), Justification::centred, 1);
}

void TestPluginAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    logo.setBounds(0, 0, 540, 200);
    vectorScope.setBounds(550, 0, 192, 286);
    
    headroomBreachedLabel.setBounds(5, 350, 200, 40);
    leftLevel.setBounds(5, 250, 16, 100);
    rightLevel.setBounds(23, 250, 50, 100);
    
    dynamicRangeLabel.setBounds(205, 350, 200, 40);
    dynamicHeadroomLevel.setBounds(205, 250, 50, 100);
    
    stereoCorrelationLabel.setBounds(405, 350, 200, 40);
    stereoCorrelationLevel.setBounds(405, 250, 50, 100);
    
    bassSpaceLabel.setBounds(605, 350, 200, 40);
    
    freq1Label.setBounds(605, 230, 100, 25);
    freq2Label.setBounds(605, 260, 100, 25);
    freq3Label.setBounds(605, 290, 100, 25);
    freq4Label.setBounds(605, 320, 100, 25);
    blockSizeLabel.setBounds(605, 200, 100, 25);
    
    resetButton.setBounds(5, 210, 50, 20);
    monoButton.setBounds(60, 210, 50, 20);
    
    hyperLink.setBounds(0, 380, 300, 40);
}



void TestPluginAudioProcessorEditor::buttonClicked(juce::Button * button)
{
    
    if (button == &resetButton)
    {
        this->reset();
        return;
    }
    
    if(button == &monoButton)
    {
        monoButton.setToggleState(!monoButton.getToggleState(), dontSendNotification);
        
        getProcessor().mono = monoButton.getToggleState();
    }
    
}


void TestPluginAudioProcessorEditor::timerCallback()
{
    TestPluginAudioProcessor& processor = getProcessor();
    
    if (processor.lastPosInfo.isPlaying)
    {
        vectosScopeFadeoutCount = 0;
        
        logo.setFFTBins(processor.logoFFTBins);
        logo.repaint();
        
        leftLevel.levelData = processor.leftBlockMax; //processor.leftRMS;
        rightLevel.levelData = processor.rightBlockMax; //rightRMS;
        leftLevel.repaint();
        rightLevel.repaint();
        
        if (processor.headroomBreached)
        {
            headroomBreachedLabel.setText("Headroom: Breached", dontSendNotification);
        }
//        else
//        {
//            headroomBreachedLabel.setText("Headroom: OK", dontSendNotification);
//        }
        
        stereoCorrelationLevel.levelData = processor.stereoCorrelation + 1;
        stereoCorrelationLevel.repaint();
        stereoCorrelationLabel.setText("Stereo Correlation: " + String(processor.stereoCorrelation, 2), dontSendNotification);
        
        vectorScope.setCurrentPointArray(processor.vectorScopePoints);
        vectorScope.repaint();
        
        
    } else
    {
        
        if (vectosScopeFadeoutCount < numberVectorBuffers)
        {
            // Seems like we have just stopped playing so fade out vectorscope.
            vectorScope.setCurrentPointArray(std::array<juce::Point<float>, 100>{ juce::Point<float>(0,0) });
            vectosScopeFadeoutCount++;
            
            vectorScope.repaint();
        }
        
        // Reset the logo
        logo.setFFTBins({ 10, 20, 30, 40, 40, 30, 20, 10 });
        
        logo.repaint();
    }
}

void TestPluginAudioProcessorEditor::changeListenerCallback(juce::ChangeBroadcaster *source)
{
    // We have been notified to check the dynamicRange array.
    TestPluginAudioProcessor& processor = static_cast<TestPluginAudioProcessor&>(*source);
    
    // Get the average of the dynamicRange, note this is still being changed by the audio thread,
    // but this is only a heuristic method anyway.
    float averageDynamicRange = std::accumulate(processor.dynamicRangeAvg.begin(), processor.dynamicRangeAvg.end(), 0.0) / 100;
    float maxDynamicRange = *std::max_element(processor.dynamicRangeMax.begin(), processor.dynamicRangeMax.end());
    
    dynamicHeadroomLevel.levelData = 20 * log10f(maxDynamicRange / averageDynamicRange);
    dynamicHeadroomLevel.repaint();

    dynamicRangeLabel.setText("Dynamic Range: " + String(20 * log10f(maxDynamicRange / averageDynamicRange), 2) + "dB", dontSendNotification);
    
    float averageFilteredRMSdB = 20 * log10f(std::accumulate(processor.leftRMSFilteredAverage.begin(), processor.leftRMSFilteredAverage.end(), 0.0) / 100);
    float averageBinLeveldB = std::accumulate(processor.binAmplitudes[0].begin(), processor.binAmplitudes[0].end(), 0.0) / 100;
    freq1Label.setText("Freq: " + String(processor.binFrequencies[0]) + "Hz | Amp: " + String(averageFilteredRMSdB / averageBinLeveldB) , dontSendNotification);
    
    averageBinLeveldB = std::accumulate(processor.binAmplitudes[1].begin(), processor.binAmplitudes[1].end(), 0.0) / 100;
    freq2Label.setText("Freq: " + String(processor.binFrequencies[1]) + "Hz | Amp: " + String(averageFilteredRMSdB / averageBinLeveldB), dontSendNotification);
    
    averageBinLeveldB = std::accumulate(processor.binAmplitudes[2].begin(), processor.binAmplitudes[2].end(), 0.0) / 100;
    freq3Label.setText("Freq: " + String(processor.binFrequencies[2]) + "Hz | Amp: " + String(averageFilteredRMSdB / averageBinLeveldB), dontSendNotification);
    
    averageBinLeveldB = std::accumulate(processor.binAmplitudes[3].begin(), processor.binAmplitudes[3].end(), 0.0) / 100;
    freq4Label.setText("Freq: " + String(processor.binFrequencies[3]) + "Hz | Amp: " + String(averageFilteredRMSdB / averageBinLeveldB), dontSendNotification);
    
    blockSizeLabel.setText("Blocksize: " + String(processor.blockSize), dontSendNotification);

    
}

void TestPluginAudioProcessorEditor::reset()
{
    TestPluginAudioProcessor& processor = getProcessor();
    
    processor.headroomBreached = false;
    
    headroomBreachedLabel.setText("Headroom: OK", dontSendNotification);
}