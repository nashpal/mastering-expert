/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TestPluginAudioProcessorEditor::TestPluginAudioProcessorEditor (TestPluginAudioProcessor& p)
    : AudioProcessorEditor (p), gainLabel ("", "Throughput level:"),gainSlider ("gain")
{
    
    addAndMakeVisible(&logo);

    addAndMakeVisible (gainSlider);
    gainSlider.setSliderStyle (Slider::Rotary);
    gainSlider.addListener (this);
    gainSlider.setRange (0.0, 1.0, 0.01);
    
    // add some labels for the sliders..
    gainLabel.attachToComponent (&gainSlider, false);
    gainLabel.setFont (Font (11.0f));
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (logo.getWidth(), logo.getHeight());
    
    startTimer (100);
}

TestPluginAudioProcessorEditor::~TestPluginAudioProcessorEditor()
{
}

//==============================================================================
void TestPluginAudioProcessorEditor::paint (Graphics& g)
{
//    g.fillAll (Colours::white);
//
//    g.setColour (Colours::black);
//    g.setFont (15.0f);
//    g.drawFittedText ("Hello World!", getLocalBounds(), Justification::centred, 1);
}

void TestPluginAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    logo.setBounds(0, 0, getWidth(), getHeight());
    gainSlider.setBoundsRelative(0.05, 0.35, 0.9, 0.25);
}

AudioProcessorParameter* TestPluginAudioProcessorEditor::getParameterFromSlider (const Slider* slider) const
{
    if (slider == &gainSlider)
        return getProcessor().gain;

    
    return nullptr;
}

// This is our Slider::Listener callback, when the user drags a slider.
void TestPluginAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        // It's vital to use setValueNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        param->setValueNotifyingHost ((float) slider->getValue());
    }
}

void TestPluginAudioProcessorEditor::sliderDragStarted (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->beginChangeGesture();
    }
}

void TestPluginAudioProcessorEditor::sliderDragEnded (Slider* slider)
{
    if (AudioProcessorParameter* param = getParameterFromSlider (slider))
    {
        param->endChangeGesture();
    }
}

void TestPluginAudioProcessorEditor::timerCallback()
{
    TestPluginAudioProcessor& ourProcessor = getProcessor();
    
    logo.setFFTBins(ourProcessor.logoFFTBins);
    
    gainSlider.setValue (ourProcessor.gain->getValue(), dontSendNotification);
    
    logo.repaint();
}
