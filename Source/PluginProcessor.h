/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Settings.h"
#include "BiQuad.h"
#include "Bessel.h"
#include <array>


class TestPluginAudioProcessor : public AudioProcessor,
                                 public ActionBroadcaster
{
public:
    //==============================================================================
    TestPluginAudioProcessor();
    ~TestPluginAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    

    std::array<float, 8> logoFFTBins;
    
    // Points for vectorscope and oscilloscope.
    std::array<juce::Point<float>, UIConstants::NUMBER_SCOPE_POINTS> scopePoints;
    
    bool headroomBreached = false;
    
    AudioPlayHead::CurrentPositionInfo lastPosInfo;
    
    // Determine whether to sum stereo;
    bool mono = false;
    
    // Determine whether to solo bass
    bool bassSolo = false;
    
    // Determine to play L/R only.
    bool leftOnly = false;
    bool rightOnly = false;
    
    // How many dynmaic range measurements have we taken.
    int dynamicRangeCounter = 0;
    
    // How many bass space measurements have we taken.
    int bassSpaceCounter = 0;
        
    // Hold the dynamic range for 100 blocks.
    std::array<float, 100>  dynamicRangeMax {};
    std::array<float, 100>  dynamicRangeAvg {};
        
    // Hold the stereo correlation. Using convolution method.
    float stereoCorrelation;
    
    float leftRMS;
    float rightRMS;
        
    float blockSize;

    // 4 frequencies for bass space, get average of 100 blocks.
    float binFrequencies[4];
    std::array<std::array<float, 100>, 4> binAmplitudes;
    
    // Used to get average RMS to 'normalise' the bass space db readings.
    std::array<float, 100> leftRMSFilteredAverage;
        
    // Hold the block's max sample value from left or right.
    float leftBlockMax;
    float rightBlockMax;
    
    // Hold the max peak levels until reset.
    float leftPeak = 0;
    float rightPeak = 0;
    
    // Hold 100ms of filtered left/right energy.
    float lufsMomentaryLoudnessBlockEnergy;
    float lufsMomentaryLoudnessBlockEnergySafe;
    
    // To calculate LUFS momentary loudness we need a 400ms block of data.
    int lufsMomentaryLoudnessSampleCount;
    
    // LUFS value of 3 seconds
    int lufsShortTermLoudnessSampleCount;
    
    // Range between [0,2] for l - r.
    float stereoBalance = 0;
    
    UIConstants::Mode mode = UIConstants::Mode::DYNAMIC_RANGE;
    
private:
    
    // Used for logo and bass space.
    int fftSize;
    std::unique_ptr<FFT> forwardFFT = nullptr;
    
    // Need to keep track of how full the fft buffer is since block size could be as small as 256.
    int fftBufferCount = 0;
    bool fftDataReady = false;
        
    std::unique_ptr<float[]> forwardLeftFFTData;
    std::unique_ptr<float[]> forwardRightFFTData;

    float leftRMSFiltered;

    // Conting for lufs gating block.
    int sampleCount = 0;
  
    // For LUFS
    BiQuad highShelfLeft;
    BiQuad highShelfRight;
    BiQuad highPassLeft;
    BiQuad highPassRight;
    
    // For bass space.
    // TODO: Maybe use different filter?
    BiQuad linkwitzRiley;
    
    // For stereo.
    BiQuad lowPassLeft1;
    BiQuad lowPassRight1;
    BiQuad lowPassLeft2;
    BiQuad lowPassRight2;
    BiQuad lowPassLeft3;
    BiQuad lowPassRight3;
    BiQuad lowPassLeft4;
    BiQuad lowPassRight4;
    
    Bessel lowPassBesselLeft;
    Bessel lowPassBesselRight;
    
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TestPluginAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
