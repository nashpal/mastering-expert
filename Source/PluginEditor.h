/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#ifndef PLUGINEDITOR_H_INCLUDED
#define PLUGINEDITOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"
#include "EmbeddedImage.h"
#include "VectorScope.h"
#include "LevelMeter.h"

//==============================================================================
/**
*/
class TestPluginAudioProcessorEditor  : public AudioProcessorEditor,
                                        public Button::Listener,
                                        public ActionListener, // For infrequent broadcasts from processor.
                                        public Timer
{
public:
    TestPluginAudioProcessorEditor (TestPluginAudioProcessor&);
    ~TestPluginAudioProcessorEditor();

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;
    
    void buttonClicked      (Button*) override;
    
    void actionListenerCallback (const String& message) override;
    
    void timerCallback() override;

private:

    // Reset display.
    void reset();
    
    EmbeddedImage logo;
    VectorScope vectorScope;
    
    Label headroomBreachedLabel;
    Label lufsMomentaryLoudnessLabel;
    Label lufsShortTermLoudnessLabel;
    Label dynamicRangeLabel;
    Label stereoCorrelationLabel;
    Label bassSpaceLabel;
    
    TextButton resetButton;
    TextButton monoButton;
    
    LevelMeter leftLevel;
    LevelMeter rightLevel;
    LevelMeter dynamicHeadroomLevel;
    LevelMeter stereoCorrelationLevel;
    
    Label freq1Label;
    Label freq2Label;
    Label freq3Label;
    Label freq4Label;
    
    Label blockSizeLabel;
    
    HyperlinkButton hyperLink;
    
    // Need to fade out vector scope if play has stopped.
    int vectosScopeFadeoutCount = 0;
    
    TestPluginAudioProcessor& getProcessor() const
    {
        return static_cast<TestPluginAudioProcessor&> (processor);
    }
    
    // This will hold the sum of energy for 100ms blocks for 400ms Momentary Loudness.
    std::array<float, 4> lufsMomentaryLoudnessEnergyBlocks;
    int lufsBlockCount = 0;
    
    // This will hold the sum of energy for 100ms blocks for 3s Short Term Loudness.
    std::array<float, 30> lufsShortTermLoudnessEnergyBlocks;
    
    // Hold a vector of short term loudness values to calculate the Loudness Range.
    std::array<float, 100> lufsShortTermLoudness;
    
    // Resizable array of lufs short term loudness values that are > LUFS_ABSOLUTE_TRESHOLD and < LUFS_RELATIVE_THRESHOLD
    std::vector<float> lufsAbsoluteGated;
    
    // Resizable array of lufs short term loudness values that are < LUFS_RELATIVE_THRESHOLD
    std::vector<float> lufsRelativeGated;
    
    std::vector<float> lufsLogRemoved;
    
    // LUFS loudness range constants.
    const float LUFS_ABSOLUTE_THRESHOLD = -70;
    const float LUFS_RELATIVE_THRESHOLD = -20;
    const float LUFS_LOWER_PERCENTILE = 10;
    const float LUFS_UPPER_PERCENTILE = 95;
    
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TestPluginAudioProcessorEditor)
};


#endif  // PLUGINEDITOR_H_INCLUDED
