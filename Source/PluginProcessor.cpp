/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
TestPluginAudioProcessor::TestPluginAudioProcessor() : shortFFT(int(ShortFFT::Order), false), longFFT(int(LongFFT::Order), false)
{
    // Set up our parameters. The base class will delete them for us.
    addParameter (gain  = new FloatParameter (defaultGain,  "Gain"));
}

TestPluginAudioProcessor::~TestPluginAudioProcessor()
{
}

//==============================================================================
const String TestPluginAudioProcessor::getName() const
{
    return JucePlugin_Name;
}


const String TestPluginAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String TestPluginAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool TestPluginAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool TestPluginAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool TestPluginAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool TestPluginAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool TestPluginAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double TestPluginAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int TestPluginAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int TestPluginAudioProcessor::getCurrentProgram()
{
    return 0;
}

void TestPluginAudioProcessor::setCurrentProgram (int index)
{
}

const String TestPluginAudioProcessor::getProgramName (int index)
{
    return String();
}

void TestPluginAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void TestPluginAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    if (getNumInputChannels() < 2)
    {
        // Only want stereo...
    }
}

void TestPluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    int x = 4;
}

void TestPluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    
    dynamicRangeCounter++;
    
    const int numSamples = buffer.getNumSamples();
    
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    
    // Get left channel FFT for logo.
    const float* channelData = buffer.getReadPointer (0);
    zeromem (shortFFTData, sizeof (shortFFTData));
    memcpy (shortFFTData, channelData, int(ShortFFT::Size) * sizeof(float));
    shortFFT.performFrequencyOnlyForwardTransform (shortFFTData);
    
    
    // Get bins at 1,2,4,8, ...
    for (int i = 0, j = 1; i < 8; i++, j*=2)
    {
        logoFFTBins[i] = int(shortFFTData[j]);
    }
    
    
    // Hold the sum of all summed L/R samples for average.
    float blockFrameSum = 0;
    
    // Hold the block's max sample value from left or right.
    float blockMax = 0;
    
    if (getNumInputChannels() == 2 && getNumOutputChannels() == 2)
    {
        for (int i = 0; i < numSamples; ++i)
        {
            float* leftChannelData = buffer.getWritePointer (0);
            float* rightChannelData = buffer.getWritePointer (1);
            
            // Headroom!
            if (!headroomBreached)
            {
                headroomBreached = std::abs(leftChannelData[i]) > 0.5 || std::abs(rightChannelData[i]) > 0.5 ? true : false;
            }
            
            if (blockMax < std::abs(leftChannelData[i]))
            {
                blockMax = std::abs(leftChannelData[i]);
            }
            if (blockMax < std::abs(rightChannelData[i]))
            {
                blockMax = std::abs(rightChannelData[i]);
            }
           
            float frameSum = leftChannelData[i] + rightChannelData[i];
            blockFrameSum += (std::abs(leftChannelData[i]) + std::abs(rightChannelData[i]));
            
            // Mono!
            if (mono)
            {
                float frameSumAverage = frameSum / 2.f;
            
                leftChannelData[i] = frameSumAverage;
                rightChannelData[i] = frameSumAverage;
            }
            
            // Dynamic range
//            channelData[i] *= gain->getValue();
        }
    }
    
    // Calculate average value for this block
    float blockAverage = (blockFrameSum / 2) / static_cast<float>(numSamples);
    
    if (dynamicRangeCounter < 100)
    {
        // Use this value to get dB, i.e. 20log(blockMax/blockAverage).
        dynamicRange[dynamicRangeCounter] = 20 * logf(blockMax / blockAverage);
    } else
    {
        // Notify the editor to check the average value of dynamicRange.
        sendChangeMessage();
        dynamicRangeCounter = 0;
    }
    
    
    // ask the host for the current time.
    AudioPlayHead::CurrentPositionInfo newTime;
    
    if (getPlayHead() != nullptr && getPlayHead()->getCurrentPosition (newTime))
    {
        // Successfully got the current time from the host..
        lastPosInfo = newTime;
    }
    else
    {
        // If the host fails to fill-in the current time, we'll just clear it to a default..
        lastPosInfo.resetToDefault();
    }
    
}

//==============================================================================
bool TestPluginAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* TestPluginAudioProcessor::createEditor()
{
    return new TestPluginAudioProcessorEditor (*this);
}

//==============================================================================
void TestPluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void TestPluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new TestPluginAudioProcessor();
}
